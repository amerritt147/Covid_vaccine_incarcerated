#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun  6 10:52:27 2022

@author: alexesmerritt
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime as dt
file=open('/Users/alexesmerritt/Desktop/Prison Vaccinaiton Project/UCLA_statewide_temporal.csv')
df=pd.read_csv(file)
df['Date'] = pd.to_datetime(df.Date, format='%Y-%m-%d')
df = df[df['Mono.Initiated.Rate'].notna()]
df_prioritized=df.loc[df['Prioritization?']=='yes']
df_not_prioritized= df.loc[df['Prioritization?']=='no']

fig, axs = plt.subplots(1,3,figsize = (30,10))
plt.suptitle('Vaccination Coverage In Incarcerated Populations Overtime')
#Graphing States that prioritized
states=df_prioritized['State'].unique()    


axs[1].set_title('Proportion of Incarcerated Vaccinated in States that Prioritized Incarcerated Poulation')
colormap = plt.cm.magma
colors = [colormap(i) for i in np.linspace(0, 1,len(states))]
axs[1].set_prop_cycle('color', colors)
for state in states: 
    df2=df_prioritized.loc[df_prioritized['State'] == state]
    for name, group in df2.groupby("State"):
        group.plot(x='Date', y='Mono.Initiated.Rate', ax=axs[1],label=state)

plt.legend()                    
axs[1].set_ylabel('Proportion of Incarcerated Population Having Initiated Vaccination')
#axs[1].set_ylim(0,1)
              
#Graphing States that did not prioritized
states=df_not_prioritized['State'].unique()    



axs[2].set_title('Proportion of Incarcerated Vaccinated in States that Did Not Prioritize Incarcerated Poulation')
colormap = plt.cm.magma
colors = [colormap(i) for i in np.linspace(0, 1,len(states))]
axs[2].set_prop_cycle('color', colors)
for state in states: 
    df2=df_not_prioritized.loc[df_not_prioritized['State'] == state]
    for name, group in df2.groupby("State"):
        group.plot(x='Date', y='Mono.Initiated.Rate', ax=axs[2],label=state)
fig.autofmt_xdate()    
plt.legend()                    
axs[2].set_ylabel('Proportion of Incarcerated Population Having Intiated Vaccination')

#Graphing All States
states=df['State'].unique()    

axs[0].set_title('Proportion of Incarcerated Populations Having Initiated Vaccination by State')
colormap = plt.cm.magma
colors = [colormap(i) for i in np.linspace(0, 1,len(states))]
axs[0].set_prop_cycle('color', colors)
for state in states: 
    df2=df.loc[df['State'] == state]
    for name, group in df2.groupby("State"):
        group.plot(x='Date', y='Mono.Initiated.Rate', ax=axs[0],label=state)

axs[0].legend(ncol=2, loc="lower right")   
plt.show()                 
axs[0].set_ylabel('Proportion of Incarcerated Population Having Initiated Vaccination')

fig.autofmt_xdate()


fig.savefig('Vaccination Coverage over time.jpg')


fig, axs = plt.subplots(1,3,figsize = (30,10))
plt.suptitle('Vaccination Coverage In Incarcerated Populations Overtime')
#Graphing States that prioritized
states=df_prioritized['State'].unique()    


axs[1].set_title('Proportion of Incarcerated Vaccinated in States that Prioritized Incarcerated Poulation')
colormap = plt.cm.magma
colors = [colormap(i) for i in np.linspace(0, 1,len(states))]
axs[1].set_prop_cycle('color', colors)
for state in states: 
    df2=df_prioritized.loc[df_prioritized['State'] == state]
    for name, group in df2.groupby("State"):
        group.plot(x='Days', y='Mono.Initiated.Rate', ax=axs[1],label=state)

plt.legend()                    
axs[1].set_ylabel('Proportion of Incarcerated Population Having Initiated Vaccination')
#axs[1].set_ylim(0,1)
              
#Graphing States that did not prioritized
states=df_not_prioritized['State'].unique()    



axs[2].set_title('Proportion of Incarcerated Vaccinated in States that Did Not Prioritize Incarcerated Poulation')
colormap = plt.cm.magma
colors = [colormap(i) for i in np.linspace(0, 1,len(states))]
axs[2].set_prop_cycle('color', colors)
for state in states: 
    df2=df_not_prioritized.loc[df_not_prioritized['State'] == state]
    for name, group in df2.groupby("State"):
        group.plot(x='Days', y='Mono.Initiated.Rate', ax=axs[2],label=state)
#fig.autofmt_xdate()    
plt.legend()                    
axs[2].set_ylabel('Proportion of Incarcerated Population Having Intiated Vaccination')

#Graphing All States
states=df['State'].unique()    

axs[0].set_title('Proportion of Incarcerated Populations Having Initiated Vaccination by State')
colormap = plt.cm.magma
colors = [colormap(i) for i in np.linspace(0, 1,len(states))]
axs[0].set_prop_cycle('color', colors)
for state in states: 
    df2=df.loc[df['State'] == state]
    for name, group in df2.groupby("State"):
        group.plot(x='Days', y='Mono.Initiated.Rate', ax=axs[0],label=state)

axs[0].legend(ncol=2, loc="lower right")   
plt.show()                 
axs[0].set_ylabel('Proportion of Incarcerated Population Having Initiated Vaccination')

#fig.autofmt_xdate()


fig.savefig('Vaccination Coverage by day.jpg')





fig, ax = plt.subplots(figsize = (10,10))
states=df['State'].unique()    
ax.set_title('Proportion of Incarcerated Initiating Vaccination by State')
colormap = plt.cm.magma
colors = [colormap(i) for i in np.linspace(0, 1,len(states))]
ax.set_prop_cycle('color', colors)
for state in states: 
    df2=df.loc[df['State'] == state]
    for name, group in df2.groupby("State"):
        group.plot(x='Date', y='Mono.Initiated.Rate', ax=ax,label=state)
plt.axvline(x = dt.strptime('2021-04-19','%Y-%m-%d'), color = 'gray',linestyle='--',label='Vaccination opened to 18+')
plt.axvline(x = dt.strptime('2021-05-11','%Y-%m-%d'), color = 'gray',linestyle=':',label='Vaccination opened to 12+')
plt.axvline(x = dt.strptime('2021-11-19','%Y-%m-%d'), color = 'gray',linestyle='-.',label='Boosters opened to 18+')        
##April 19th is when most states allowed vaccination for all alults 

plt.legend(ncol=2, loc="lower right")                    
ax.set_ylabel('Proportion of Incarcerated Population Having Initiated Vaccination')
fig.savefig('Vaccination Coverage.jpg')
